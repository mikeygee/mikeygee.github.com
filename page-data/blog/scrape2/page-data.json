{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/scrape2","result":{"data":{"markdownRemark":{"fields":{"longDate":"June 21, 2013"},"frontmatter":{"title":"scraping with node.js"},"html":"<p>Last year, I wrote a <a href=\"/blog/scrape\">post about web scraping</a>. The app I was working on was using PHP, so the HTML parsing code required a library that is probably not too well known. Since then I've started using node.js more, which makes scraping much easier. I thought I'd do another example with node, where it's possible to use the more common jQuery syntax for HTML parsing.</p>\n<p>For this example, I'll be scraping song lyrics from <a href=\"http://lyrics.wikia.com\">LyricWiki</a>. By exploring the site, I found that the URL pattern for a given track is <a href=\"http://lyrics.wikia.com/%5C%5Bartist%5C_name%5C%5D:%5C%5Btrack%5C_name%5C%5D\">http://lyrics.wikia.com/\\[artist\\_name\\]:\\[track\\_name\\]</a>. So for this example, I'll pass the artist and track as arguments to my script.</p>\n<!--break-->\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> artist <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s+/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> track <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s+/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>artist <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>track<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Usage: node lyrics_scrape.js [artist] [track]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://lyrics.wikia.com/'</span> <span class=\"token operator\">+</span> artist <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> track<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next I include a couple of node libraries for fetching the html, and parsing HTML with jquery syntax.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// npm install request</span>\n<span class=\"token keyword\">var</span> cheerio <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cheerio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// npm install cheerio</span></code></pre></div>\n<p>There are a couple options for the parser library. <a href=\"https://github.com/tmpvar/jsdom\">jsdom</a> will give you a full W3C DOM environment to work with, which has quite a bit of overhead. You can then load the actual jQuery library, and start using it. <a href=\"https://github.com/MatthewMueller/cheerio\">Cheerio</a> uses a simpler DOM, and implements a subset of the jQuery API without all the extra browser dependent code, resulting in much better performance. This is a more appropriate solution for scraping.</p>\n<p>After we load the libraries, we request the URL, pass the HTML to cheerio, and start parsing out the information we want. I target the div with class \"lyricbox\", remove a couple of nodes that I don't want, replace &#x3C;br>'s with newlines, and grab the text. For my application, I wanted the lyrics as an array of lines. Here's the rest of the script.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> html</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> cheerio<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.lyricbox > .rtMatcher, div.lyricbox > .lyricsbreak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.lyricbox > br'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> lyrics <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.lyricbox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lyrics<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then we run it on the command line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt; node lyrics_scrape.js weezer &quot;only in dreams&quot;\n\n[ &#39;You can\\&#39;t resist her&#39;,\n  &#39;She\\&#39;s in your bones&#39;,\n  &#39;She is your marrow&#39;,\n  &#39;And your ride home&#39;,\n  &#39;&#39;,\n  &#39;You can\\&#39;t avoid her&#39;,\n  &#39;She\\&#39;s in the air&#39;,\n  &#39;In between molecules of&#39;,\n  &#39;Oxygen and carbon dioxide&#39;,\n  &#39;&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;We see what it means&#39;,\n  &#39;Reach out our hands&#39;,\n  &#39;Hold on to hers&#39;,\n  &#39;But when we wake&#39;,\n  &#39;It\\&#39;s all been erased&#39;,\n  &#39;And so it seems&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;&#39;,\n  &#39;You walk up to her&#39;,\n  &#39;Ask her to dance&#39;,\n  &#39;She says, &quot;Hey, baby&#39;,\n  &#39;I just might take the chance&quot;&#39;,\n  &#39;&#39;,\n  &#39;You say it\\&#39;s a good thing&#39;,\n  &#39;That you float in the air&#39;,\n  &#39;That way there\\&#39;s no way&#39;,\n  &#39;I will crush your pretty toenails into a thousand pieces&#39;,\n  &#39;&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;We see what it means&#39;,\n  &#39;Reach out our hands&#39;,\n  &#39;Hold on to hers&#39;,\n  &#39;But when we wake&#39;,\n  &#39;It\\&#39;s all been erased&#39;,\n  &#39;And so it seems&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;Only in dreams&#39;,\n  &#39;&#39;,\n  &#39;&#39;,\n  &#39;&#39; ]</code></pre></div>\n<p>And that's it, much simpler than the PHP library, and using the same language and syntax as the browser. My workflow now is to start in the browser, use the <a href=\"http://www.learningjquery.com/2009/04/better-stronger-safer-jquerify-bookmarklet\">jQuerify</a> bookmarklet to add jQuery to any web page. Then you can experiment in the browser console and once you have your selectors figured out, transfer them over to the node server.</p>","timeToRead":3}},"pageContext":{"id":"2bc97740-1f82-51e8-b8c7-fccae01ff6a5"}}}